# generated by fastapi-codegen:
#   filename:  openapi.yaml
#   timestamp: 2025-06-28T09:39:04+00:00

from __future__ import annotations

from typing import Any, Dict, List, Optional

from pydantic import BaseModel, ConfigDict, Field, RootModel, conint, constr


class AccessDeniedException(RootModel[Any]):
    root: Any


class Arn(
    RootModel[
        constr(
            pattern=r'^arn:aws:[A-Za-z0-9][A-Za-z0-9_/.-]{0,62}:[A-Za-z0-9_/.-]{0,63}:[A-Za-z0-9_/.-]{0,63}:[A-Za-z0-9][A-Za-z0-9:_/+=,@.-]{0,1023}$',
            min_length=1,
            max_length=2048,
        )
    ]
):
    root: constr(
        pattern=r'^arn:aws:[A-Za-z0-9][A-Za-z0-9_/.-]{0,62}:[A-Za-z0-9_/.-]{0,63}:[A-Za-z0-9_/.-]{0,63}:[A-Za-z0-9][A-Za-z0-9:_/+=,@.-]{0,1023}$',
        min_length=1,
        max_length=2048,
    )


class ClientId(RootModel[constr(pattern=r'.*', min_length=1, max_length=255)]):
    root: constr(pattern=r'.*', min_length=1, max_length=255)


class CreateEventIntegrationResponse(BaseModel):
    EventIntegrationArn: Optional[Arn] = None


class DataIntegrationAssociationSummary(BaseModel):
    ClientId_1: Optional[ClientId] = Field(None, alias='ClientId')
    DataIntegrationArn: Optional[Arn] = None
    DataIntegrationAssociationArn: Optional[Arn] = None


class DataIntegrationAssociationsList(
    RootModel[List[DataIntegrationAssociationSummary]]
):
    root: List[DataIntegrationAssociationSummary] = Field(
        ..., max_length=50, min_length=1
    )


class DeleteDataIntegrationRequest(BaseModel):
    pass


class DeleteDataIntegrationResponse(BaseModel):
    pass


class DeleteEventIntegrationRequest(BaseModel):
    pass


class DeleteEventIntegrationResponse(BaseModel):
    pass


class Description(RootModel[constr(pattern=r'.*', min_length=1, max_length=1000)]):
    root: constr(pattern=r'.*', min_length=1, max_length=1000)


class DuplicateResourceException(RootModel[Any]):
    root: Any


class EventBridgeBus(
    RootModel[constr(pattern=r'^[a-zA-Z0-9\/\._\-]+$', min_length=1, max_length=255)]
):
    root: constr(pattern=r'^[a-zA-Z0-9\/\._\-]+$', min_length=1, max_length=255)


class EventBridgeRuleName(
    RootModel[constr(pattern=r'^[a-zA-Z0-9\/\._\-]+$', min_length=1, max_length=2048)]
):
    root: constr(pattern=r'^[a-zA-Z0-9\/\._\-]+$', min_length=1, max_length=2048)


class Fields(
    RootModel[constr(pattern=r'^[a-zA-Z0-9\/\._\-]+$', min_length=1, max_length=255)]
):
    root: constr(pattern=r'^[a-zA-Z0-9\/\._\-]+$', min_length=1, max_length=255)


class FieldsList(RootModel[List[Fields]]):
    root: List[Fields] = Field(..., max_length=2048, min_length=1)


class FieldsMap(RootModel[Optional[Dict[str, FieldsList]]]):
    root: Optional[Dict[str, FieldsList]] = None


class GetDataIntegrationRequest(BaseModel):
    pass


class GetEventIntegrationRequest(BaseModel):
    pass


class IdempotencyToken(RootModel[constr(pattern=r'.*', min_length=1, max_length=2048)]):
    root: constr(pattern=r'.*', min_length=1, max_length=2048)


class Identifier(RootModel[constr(pattern=r'.*\S.*', min_length=1, max_length=255)]):
    root: constr(pattern=r'.*\S.*', min_length=1, max_length=255)


class InternalServiceError(RootModel[Any]):
    root: Any


class InvalidRequestException(RootModel[Any]):
    root: Any


class ListDataIntegrationAssociationsRequest(BaseModel):
    pass


class ListDataIntegrationsRequest(BaseModel):
    pass


class ListEventIntegrationAssociationsRequest(BaseModel):
    pass


class ListEventIntegrationsRequest(BaseModel):
    pass


class ListTagsForResourceRequest(BaseModel):
    pass


class MaxResults(RootModel[conint(ge=1, le=50)]):
    root: conint(ge=1, le=50)


class Name(
    RootModel[constr(pattern=r'^[a-zA-Z0-9\/\._\-]+$', min_length=1, max_length=255)]
):
    root: constr(pattern=r'^[a-zA-Z0-9\/\._\-]+$', min_length=1, max_length=255)


class NextToken(RootModel[constr(pattern=r'.*', min_length=1, max_length=1000)]):
    root: constr(pattern=r'.*', min_length=1, max_length=1000)


class NonBlankLongString(
    RootModel[constr(pattern=r'.*\S.*', min_length=1, max_length=200)]
):
    root: constr(pattern=r'.*\S.*', min_length=1, max_length=200)


class NonBlankString(
    RootModel[constr(pattern=r'.*\S.*', min_length=1, max_length=255)]
):
    root: constr(pattern=r'.*\S.*', min_length=1, max_length=255)


class Object(
    RootModel[constr(pattern=r'^[a-zA-Z0-9\/\._\-]+$', min_length=1, max_length=255)]
):
    root: constr(pattern=r'^[a-zA-Z0-9\/\._\-]+$', min_length=1, max_length=255)


class ObjectConfiguration(RootModel[Optional[Dict[str, FieldsMap]]]):
    root: Optional[Dict[str, FieldsMap]] = None


class ResourceNotFoundException(RootModel[Any]):
    root: Any


class ResourceQuotaExceededException(RootModel[Any]):
    root: Any


class ScheduleConfiguration(BaseModel):
    FirstExecutionFrom: Optional[NonBlankString] = None
    Object_1: Optional[Object] = Field(None, alias='Object')
    ScheduleExpression: NonBlankString


class Source(
    RootModel[constr(pattern=r'^aws\.partner\/.*$', min_length=1, max_length=256)]
):
    root: constr(pattern=r'^aws\.partner\/.*$', min_length=1, max_length=256)


class SourceURI(
    RootModel[
        constr(
            pattern=r'^(\w+\:\/\/[\w.-]+[\w/!@#+=.-]+$)|(\w+\:\/\/[\w.-]+[\w/!@#+=.-]+[\w/!@#+=.-]+[\w/!@#+=.,-]+$)',
            min_length=1,
            max_length=1000,
        )
    ]
):
    root: constr(
        pattern=r'^(\w+\:\/\/[\w.-]+[\w/!@#+=.-]+$)|(\w+\:\/\/[\w.-]+[\w/!@#+=.-]+[\w/!@#+=.-]+[\w/!@#+=.,-]+$)',
        min_length=1,
        max_length=1000,
    )


class TagKey(
    RootModel[
        constr(pattern=r'^(?!aws:)[a-zA-Z+-=._:/]+$', min_length=1, max_length=128)
    ]
):
    model_config = ConfigDict(
        regex_engine="python-re",
    )
    root: constr(pattern=r'^(?!aws:)[a-zA-Z+-=._:/]+$', min_length=1, max_length=128)


class TagKeyList(RootModel[List[TagKey]]):
    root: List[TagKey] = Field(..., max_length=200, min_length=1)


class TagResourceResponse(BaseModel):
    pass


class TagValue(RootModel[constr(max_length=256)]):
    root: constr(max_length=256)


class ThrottlingException(RootModel[Any]):
    root: Any


class UUID(
    RootModel[
        constr(pattern=r'[a-f0-9]{8}-[a-f0-9]{4}-[a-f0-9]{4}-[a-f0-9]{4}-[a-f0-9]{12}')
    ]
):
    root: constr(
        pattern=r'[a-f0-9]{8}-[a-f0-9]{4}-[a-f0-9]{4}-[a-f0-9]{4}-[a-f0-9]{12}'
    )


class UntagResourceRequest(BaseModel):
    pass


class UntagResourceResponse(BaseModel):
    pass


class UpdateDataIntegrationRequest(BaseModel):
    Description_1: Optional[Description] = Field(None, alias='Description')
    Name_1: Optional[Name] = Field(None, alias='Name')


class UpdateDataIntegrationResponse(BaseModel):
    pass


class UpdateEventIntegrationRequest(BaseModel):
    Description_1: Optional[Description] = Field(None, alias='Description')


class UpdateEventIntegrationResponse(BaseModel):
    pass


class ScheduleConfig(BaseModel):
    FirstExecutionFrom: Optional[NonBlankString] = None
    Object_1: Optional[Object] = Field(None, alias='Object')
    ScheduleExpression: Optional[NonBlankString] = None


class DataIntegrationsIdentifierPatchRequest(BaseModel):
    Description: Optional[constr(pattern=r'.*', min_length=1, max_length=1000)] = Field(
        None, description='A description of the DataIntegration.'
    )
    Name: Optional[
        constr(pattern=r'^[a-zA-Z0-9\/\._\-]+$', min_length=1, max_length=255)
    ] = Field(None, description='The name of the DataIntegration.')


class EventFilter1(BaseModel):
    Source_1: Optional[Source] = Field(None, alias='Source')


class EventIntegrationsPostRequest(BaseModel):
    ClientToken: Optional[constr(pattern=r'.*', min_length=1, max_length=2048)] = Field(
        None,
        description='A unique, case-sensitive identifier that you provide to ensure the idempotency of the request. If not provided, the Amazon Web Services SDK populates this field. For more information about idempotency, see <a href="https://aws.amazon.com/builders-library/making-retries-safe-with-idempotent-APIs/">Making retries safe with idempotent APIs</a>.',
    )
    Description: Optional[constr(pattern=r'.*', min_length=1, max_length=1000)] = Field(
        None, description='The description of the event integration.'
    )
    EventBridgeBus: constr(
        pattern=r'^[a-zA-Z0-9\/\._\-]+$', min_length=1, max_length=255
    ) = Field(..., description='The EventBridge bus.')
    EventFilter: EventFilter1 = Field(..., description='The event filter.')
    Name: constr(pattern=r'^[a-zA-Z0-9\/\._\-]+$', min_length=1, max_length=255) = (
        Field(..., description='The name of the event integration.')
    )
    Tags: Optional[Dict[str, TagValue]] = Field(
        None,
        description='The tags used to organize, track, or control access for this resource. For example, { "tags": {"key1":"value1", "key2":"value2"} }.',
    )


class EventIntegrationsNamePatchRequest(BaseModel):
    Description: Optional[constr(pattern=r'.*', min_length=1, max_length=1000)] = Field(
        None, description='The description of the event inegration.'
    )


class TagsResourceArnPostRequest(BaseModel):
    tags: Dict[str, TagValue] = Field(
        ...,
        description='The tags used to organize, track, or control access for this resource. For example, { "tags": {"key1":"value1", "key2":"value2"} }.',
    )


class TagKeys(RootModel[List[TagKey]]):
    root: List[TagKey] = Field(..., max_length=200, min_length=1)


class ClientAssociationMetadata(RootModel[Optional[Dict[str, NonBlankString]]]):
    root: Optional[Dict[str, NonBlankString]] = None


class DataIntegrationSummary(BaseModel):
    Arn_1: Optional[Arn] = Field(None, alias='Arn')
    Name_1: Optional[Name] = Field(None, alias='Name')
    SourceURI_1: Optional[SourceURI] = Field(None, alias='SourceURI')


class DataIntegrationsList(RootModel[List[DataIntegrationSummary]]):
    root: List[DataIntegrationSummary] = Field(..., max_length=50, min_length=1)


class EventFilter(BaseModel):
    Source_1: Source = Field(..., alias='Source')


class EventIntegrationAssociation(BaseModel):
    ClientAssociationMetadata_1: Optional[ClientAssociationMetadata] = Field(
        None, alias='ClientAssociationMetadata'
    )
    ClientId_1: Optional[ClientId] = Field(None, alias='ClientId')
    EventBridgeRuleName_1: Optional[EventBridgeRuleName] = Field(
        None, alias='EventBridgeRuleName'
    )
    EventIntegrationAssociationArn: Optional[Arn] = None
    EventIntegrationAssociationId: Optional[UUID] = None
    EventIntegrationName: Optional[Name] = None


class EventIntegrationAssociationsList(RootModel[List[EventIntegrationAssociation]]):
    root: List[EventIntegrationAssociation] = Field(..., max_length=50, min_length=1)


class FolderList(RootModel[List[NonBlankLongString]]):
    root: List[NonBlankLongString] = Field(..., max_length=10, min_length=1)


class ListDataIntegrationAssociationsResponse(BaseModel):
    DataIntegrationAssociations: Optional[DataIntegrationAssociationsList] = None
    NextToken_1: Optional[NextToken] = Field(None, alias='NextToken')


class ListDataIntegrationsResponse(BaseModel):
    DataIntegrations: Optional[DataIntegrationsList] = None
    NextToken_1: Optional[NextToken] = Field(None, alias='NextToken')


class ListEventIntegrationAssociationsResponse(BaseModel):
    EventIntegrationAssociations: Optional[EventIntegrationAssociationsList] = None
    NextToken_1: Optional[NextToken] = Field(None, alias='NextToken')


class TagMap(RootModel[Optional[Dict[str, TagValue]]]):
    root: Optional[Dict[str, TagValue]] = None


class TagResourceRequest(BaseModel):
    tags: TagMap


class FileConfiguration1(BaseModel):
    Filters: Optional[FieldsMap] = None
    Folders: Optional[FolderList] = None


class DataIntegrationsPostRequest(BaseModel):
    ClientToken: Optional[constr(pattern=r'.*', min_length=1, max_length=2048)] = Field(
        None,
        description='A unique, case-sensitive identifier that you provide to ensure the idempotency of the request. If not provided, the Amazon Web Services SDK populates this field. For more information about idempotency, see <a href="https://aws.amazon.com/builders-library/making-retries-safe-with-idempotent-APIs/">Making retries safe with idempotent APIs</a>.',
    )
    Description: Optional[constr(pattern=r'.*', min_length=1, max_length=1000)] = Field(
        None, description='A description of the DataIntegration.'
    )
    FileConfiguration: Optional[FileConfiguration1] = Field(
        None,
        description='The configuration for what files should be pulled from the source.',
    )
    KmsKey: constr(pattern=r'.*\S.*', min_length=1, max_length=255) = Field(
        ..., description='The KMS key for the DataIntegration.'
    )
    Name: constr(pattern=r'^[a-zA-Z0-9\/\._\-]+$', min_length=1, max_length=255) = (
        Field(..., description='The name of the DataIntegration.')
    )
    ObjectConfiguration: Optional[Dict[str, FieldsMap]] = Field(
        None,
        description='The configuration for what data should be pulled from the source.',
    )
    ScheduleConfig_1: ScheduleConfig = Field(
        ...,
        alias='ScheduleConfig',
        description='The name of the data and how often it should be pulled from the source.',
    )
    SourceURI: constr(
        pattern=r'^(\w+\:\/\/[\w.-]+[\w/!@#+=.-]+$)|(\w+\:\/\/[\w.-]+[\w/!@#+=.-]+[\w/!@#+=.-]+[\w/!@#+=.,-]+$)',
        min_length=1,
        max_length=1000,
    ) = Field(..., description='The URI of the data source.')
    Tags: Optional[Dict[str, TagValue]] = Field(
        None,
        description='The tags used to organize, track, or control access for this resource. For example, { "tags": {"key1":"value1", "key2":"value2"} }.',
    )


class CreateEventIntegrationRequest(BaseModel):
    ClientToken: Optional[IdempotencyToken] = None
    Description_1: Optional[Description] = Field(None, alias='Description')
    EventBridgeBus_1: EventBridgeBus = Field(..., alias='EventBridgeBus')
    EventFilter_1: EventFilter = Field(..., alias='EventFilter')
    Name_1: Name = Field(..., alias='Name')
    Tags: Optional[TagMap] = None


class EventIntegration(BaseModel):
    Description_1: Optional[Description] = Field(None, alias='Description')
    EventBridgeBus_1: Optional[EventBridgeBus] = Field(None, alias='EventBridgeBus')
    EventFilter_1: Optional[EventFilter] = Field(None, alias='EventFilter')
    EventIntegrationArn: Optional[Arn] = None
    Name_1: Optional[Name] = Field(None, alias='Name')
    Tags: Optional[TagMap] = None


class EventIntegrationsList(RootModel[List[EventIntegration]]):
    root: List[EventIntegration] = Field(..., max_length=50, min_length=1)


class FileConfiguration(BaseModel):
    Filters: Optional[FieldsMap] = None
    Folders: FolderList


class GetDataIntegrationResponse(BaseModel):
    Arn_1: Optional[Arn] = Field(None, alias='Arn')
    Description_1: Optional[Description] = Field(None, alias='Description')
    FileConfiguration_1: Optional[FileConfiguration] = Field(
        None, alias='FileConfiguration'
    )
    Id: Optional[UUID] = None
    KmsKey: Optional[NonBlankString] = None
    Name_1: Optional[Name] = Field(None, alias='Name')
    ObjectConfiguration_1: Optional[ObjectConfiguration] = Field(
        None, alias='ObjectConfiguration'
    )
    ScheduleConfiguration_1: Optional[ScheduleConfiguration] = Field(
        None, alias='ScheduleConfiguration'
    )
    SourceURI_1: Optional[SourceURI] = Field(None, alias='SourceURI')
    Tags: Optional[TagMap] = None


class GetEventIntegrationResponse(BaseModel):
    Description_1: Optional[Description] = Field(None, alias='Description')
    EventBridgeBus_1: Optional[EventBridgeBus] = Field(None, alias='EventBridgeBus')
    EventFilter_1: Optional[EventFilter] = Field(None, alias='EventFilter')
    EventIntegrationArn: Optional[Arn] = None
    Name_1: Optional[Name] = Field(None, alias='Name')
    Tags: Optional[TagMap] = None


class ListEventIntegrationsResponse(BaseModel):
    EventIntegrations: Optional[EventIntegrationsList] = None
    NextToken_1: Optional[NextToken] = Field(None, alias='NextToken')


class ListTagsForResourceResponse(BaseModel):
    tags: Optional[TagMap] = None


class CreateDataIntegrationRequest(BaseModel):
    ClientToken: Optional[IdempotencyToken] = None
    Description_1: Optional[Description] = Field(None, alias='Description')
    FileConfiguration_1: Optional[FileConfiguration] = Field(
        None, alias='FileConfiguration'
    )
    KmsKey: NonBlankString
    Name_1: Name = Field(..., alias='Name')
    ObjectConfiguration_1: Optional[ObjectConfiguration] = Field(
        None, alias='ObjectConfiguration'
    )
    ScheduleConfig: ScheduleConfiguration
    SourceURI_1: SourceURI = Field(..., alias='SourceURI')
    Tags: Optional[TagMap] = None


class CreateDataIntegrationResponse(BaseModel):
    Arn_1: Optional[Arn] = Field(None, alias='Arn')
    ClientToken: Optional[IdempotencyToken] = None
    Description_1: Optional[Description] = Field(None, alias='Description')
    FileConfiguration_1: Optional[FileConfiguration] = Field(
        None, alias='FileConfiguration'
    )
    Id: Optional[UUID] = None
    KmsKey: Optional[NonBlankString] = None
    Name_1: Optional[Name] = Field(None, alias='Name')
    ObjectConfiguration_1: Optional[ObjectConfiguration] = Field(
        None, alias='ObjectConfiguration'
    )
    ScheduleConfiguration_1: Optional[ScheduleConfiguration] = Field(
        None, alias='ScheduleConfiguration'
    )
    SourceURI_1: Optional[SourceURI] = Field(None, alias='SourceURI')
    Tags: Optional[TagMap] = None
